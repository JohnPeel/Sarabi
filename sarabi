#!/usr/bin/env python

'''Sarabi is a package manager for the Simba project.

'''

from __future__ import print_function
import os
import sys
import argparse
import pygit2

from conf import Config
from remote import Remote
from misc import get_default_config, get_repo, parse_package_atom

class Sarabi(object):
  def __init__(self, configfile):
    self.configfile = configfile
    self.config = Config(configfile)
    self.remotes = []

    for path in ['.', 'remotes', 'packages', 'info']:
      path = os.path.join(self.config['path'], path)
      if (not os.path.exists(path)):
        os.mkdir(path)
    self.update_remotes()

  def update_remotes(self):
    for name, url in self.config['remotes'].items():
      self.remotes.append(Remote(name, url, os.path.join(self.config['path'], 'remotes', name)))

  def info(self, **args):
    self.config.info()

  def install(self, **args):
    atom = parse_package_atom(args['package'])
    for remote in self.remotes:
      if (remote.has_package(args['package'])):
        pass # TODO: Write this... get_package().install(), append atom to world...
    else:
      print('Package not found.')

  def uninstall(self, **args):
    atom = parse_package_atom(args['package'])
    #TODO: write this...

  def update(self, **args):
    for remote in self.remotes:
      print('Updating remote %s: %s (%s)' % (remote['name'], remote['url'], remote['path']))
      remote.update()

  def upgrade(self, **args):
    pass # TODO: find atoms in world, update...

  def remote_list(self, **args):
    for name, url in self.config['remotes'].iteritems():
      print("%s: %s" % (name, url))

  def remote_add(self, **args):
    self.config['remotes'][args['repo_name']] = args['repo']

  def remote_remove(self, **args):
    del self.config['remotes'][args['repo_name']]

  def remote(self, **args):
    call = getattr(self, 'remote_' + args['remote_action'])
    call(**args)

  def call(self, **args):
    call = getattr(self, args['action'])
    call(**args)
    

def parse_args(argv, configfile):
  parser = argparse.ArgumentParser(description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter) 
  parser.add_argument('--config', default=configfile)

  subparsers = parser.add_subparsers(dest='action')

  parser_info = subparsers.add_parser('info')

  parser_install = subparsers.add_parser('install')
  parser_install.add_argument('package')

  parser_uninstall = subparsers.add_parser('uninstall')
  parser_uninstall.add_argument('package')

  parser_update = subparsers.add_parser('update')
  parser_upgrade = subparsers.add_parser('upgrade')
  
  parser_remote = subparsers.add_parser('remote')
  remote_subparsers = parser_remote.add_subparsers(dest='remote_action')
  parser_remote_list = remote_subparsers.add_parser('list')
  parser_remote_add = remote_subparsers.add_parser('add')
  parser_remote_add.add_argument('repo_name')
  parser_remote_add.add_argument('repo')
  parser_remote_remove = remote_subparsers.add_parser('remove')
  parser_remote_remove.add_argument('repo_name')

  return vars(parser.parse_args(argv))

if (__name__ == '__main__'):
  args = parse_args(sys.argv[1:], get_default_config(sys.argv[0]))
  sarabi = Sarabi(args['config'])
  sarabi.call(**args)
